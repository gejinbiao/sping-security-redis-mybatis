<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
             xmlns:mvc="http://www.springframework.org/schema/mvc"
             xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                        http://www.springframework.org/schema/security
                        http://www.springframework.org/schema/security/spring-security-4.0.xsd http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">


    <!--
     Spring Security + OAuth 的主配置文件
    -->

    <!-- 若需要调试, 可将debug 标签注释取消 -->
    <debug/>

    <!--  静态资源, 忽略 -->
    <!--static url pattern-->
    <http pattern="/resources/**" security="none"/>
    <!-- 公开, 扩展的 API, public -->
    <http pattern="/oauth/rest_token" security="none"/>
    <http pattern="/oauth/check_token" security="none"/>


    <!--
        Spring MVC的注解配置
    -->
    <mvc:annotation-driven/>
    <mvc:default-servlet-handler/>

    <!--
     OAuth2 URL: /oauth/token   的处理与配置
     一般使用时这里不需要修改, 直接使用即可
    -->
    <http pattern="/oauth/token" create-session="stateless" authentication-manager-ref="oauth2AuthenticationManager"
          entry-point-ref="oauth2AuthenticationEntryPoint" use-expressions="false">
        <!-- 设置拦截地址和规则 -->
        <intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY"/>
        <anonymous enabled="false"/>

        <http-basic entry-point-ref="oauth2AuthenticationEntryPoint"/>

        <!-- 设置过滤链 -->
        <custom-filter ref="clientCredentialsTokenEndpointFilter" before="BASIC_AUTH_FILTER"/>
        <!-- 拒绝访问处理 -->
        <access-denied-handler ref="oauth2AccessDeniedHandler"/>
        <csrf disabled="true"/>
    </http>

    <!--
        处理grant_type=client_credentials 的逻辑
        只从请求中获取client_id与client_secret
    -->
    <beans:bean id="clientCredentialsTokenEndpointFilter" class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
        <beans:property name="authenticationManager" ref="oauth2AuthenticationManager"/>
    </beans:bean>


    <!--
        对具体的资源(resource)的安全配置逻辑, 包括ROLE, Scope等
        可根据具体的需求添加, 每一类URL pattern 对应具体的resource
        /unity/**  处理资源 unityResourceServer
        /m/**  处理资源 mobileResourceServer
    -->
    <!--针对网页端资源请求 http configuration-->
    <http pattern="/unity/**" create-session="never" entry-point-ref="oauth2AuthenticationEntryPoint"
          access-decision-manager-ref="oauth2AccessDecisionManager" use-expressions="false">
        <anonymous enabled="false"/>
        <!-- 设置拦截地址和规则 -->
        <intercept-url pattern="/unity/**" access="ROLE_UNITY,SCOPE_READ"/>
        <!--过滤-->
        <custom-filter ref="unityResourceServer" before="PRE_AUTH_FILTER"/>
        <!--错误处理-->
        <access-denied-handler ref="oauth2AccessDeniedHandler"/>
        <csrf disabled="true"/>
    </http>


    <!--针对移动端资源请求mobile http configuration-->
    <http pattern="/m/**" create-session="never" entry-point-ref="oauth2AuthenticationEntryPoint"
          access-decision-manager-ref="oauth2AccessDecisionManager" use-expressions="false">
        <anonymous enabled="false"/>
        <!-- 设置拦截地址和规则 -->
        <intercept-url pattern="/m/**" access="ROLE_MOBILE,SCOPE_READ"/>
        <!-- 设置过滤链 -->
        <custom-filter ref="mobileResourceServer" before="PRE_AUTH_FILTER"/>
        <!-- 拒绝访问处理 -->
        <access-denied-handler ref="oauth2AccessDeniedHandler"/>
        <csrf disabled="true"/>
    </http>

    <!--
        每一个资源(resource)的定义, resource-id必须唯一, OauthClientDetails中的resourceIds属性的值由此来的,
        允许一个Client有多个resource-id, 由逗号(,)分隔
        每一个定义会在Security Flow中添加一个位于 PRE_AUTH_FILTER 之前的Filter
    -->
    <!--unity resource server filter-->
    <oauth2:resource-server id="unityResourceServer" resource-id="unity-resource"  token-services-ref="tokenServices"/>

    <!--mobile resource server filter-->
    <oauth2:resource-server id="mobileResourceServer" resource-id="mobile-resource" token-services-ref="tokenServices"/>


    <!--
        管理 ClientDetails 管理客户端信息
        1、获取code的时候调用loadClientByClientId方法获取客户端信息
    -->
    <beans:bean id="clientDetailsService" class="com.gjb.shiroTest.oauth.CustomJdbcClientDetailsService">
    </beans:bean>


    <!--关于token services-->
    <!-- <beans:bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore"/>-->
    <beans:bean id="tokenStore" class="com.gjb.shiroTest.oauth.RedisTokenStore">
        <beans:property name="redisTemplate" ref="redisTemplate"/>
    </beans:bean>


    <beans:bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <beans:property name="tokenStore" ref="tokenStore"/>
        <beans:property name="clientDetailsService" ref="clientDetailsService"/>
        <beans:property name="supportRefreshToken" value="true"/>
    </beans:bean>

   <!-- <global-method-security pre-post-annotations="enabled" proxy-target-class="true">
    <expression-handler ref="oauth2ExpressionHandler"/>
    </global-method-security>

    <oauth2:expression-handler id="oauth2ExpressionHandler"/>
    <oauth2:web-expression-handler id="oauth2WebExpressionHandler"/>-->

    <!--获取code时-->
    <beans:bean class="org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory" id="oAuth2RequestFactory">
        <beans:constructor-arg name="clientDetailsService" ref="clientDetailsService"/>
    </beans:bean>

    <beans:bean id="oauthUserApprovalHandler" class="org.springframework.security.oauth2.provider.approval.TokenStoreUserApprovalHandler">
        <beans:property name="tokenStore" ref="tokenStore"/>
        <beans:property name="clientDetailsService" ref="clientDetailsService"/>
        <beans:property name="requestFactory" ref="oAuth2RequestFactory"/>
    </beans:bean>



    <!--
        管理 Authorization code 自定义实现也可使用默认提供的几个
    -->
    <beans:bean id="jdbcAuthorizationCodeServices" class="com.gjb.shiroTest.oauth.RedisAuthorizationCodeServices">
    <beans:property name="redisTemplate" ref="redisTemplate"/>
    </beans:bean>

    <!--
        Security OAuth Flow的核心配置
        每一个配置对应一类具体的grant_type
        可根据需求删除或禁用, 如: <oauth2:implicit disabled="true"/>
        默认支持OAuth2提供的5类grant_type, 若不需要任何一类, 将其配置注释掉(或删掉)即可.
        若需要自定义 authorization url, 在 <oauth2:authorization-server > 配置中添加authorization-endpoint-url,如: authorization-endpoint-url="/oauth2/authorization"
        若需要自定义 token url, 在 <oauth2:authorization-server > 配置中添加token-endpoint-url配置, 如:token-endpoint-url="/oauth2/my_token"
    -->
    <oauth2:authorization-server client-details-service-ref="clientDetailsService"
                                 token-services-ref="tokenServices"
                                 user-approval-handler-ref="oauthUserApprovalHandler"
                                 user-approval-page="oauth_approval"
                                 error-page="oauth_error">
        <oauth2:authorization-code authorization-code-services-ref="jdbcAuthorizationCodeServices"/>
        <oauth2:implicit/>
        <oauth2:refresh-token/>
        <oauth2:client-credentials/>
        <oauth2:password/>
    </oauth2:authorization-server>


    <beans:bean id="oauth2AuthenticationEntryPoint"  class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint"/>


    <!---->
    <beans:bean id="oauth2ClientDetailsUserService"  class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <beans:constructor-arg ref="clientDetailsService"/>
    </beans:bean>

    <authentication-manager id="oauth2AuthenticationManager">
        <authentication-provider user-service-ref="oauth2ClientDetailsUserService"/>
    </authentication-manager>

    <!--
        扩展Spring Security 默认的 AccessDecisionManager
        添加对OAuth中 scope 的检查与校验
    -->
    <beans:bean id="oauth2AccessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
        <beans:constructor-arg>
            <beans:list>
                <beans:bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter"/>
                <beans:bean class="org.springframework.security.access.vote.RoleVoter"/>
                <beans:bean class="org.springframework.security.access.vote.AuthenticatedVoter"/>
            </beans:list>
        </beans:constructor-arg>
    </beans:bean>

    <!--拒绝访问-->
    <beans:bean id="oauth2AccessDeniedHandler"  class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler"/>


    <http disable-url-rewriting="true" use-expressions="false"  authentication-manager-ref="authenticationManager">
        <intercept-url pattern="/oauth/**" access="ROLE_USER,ROLE_UNITY,ROLE_MOBILE"/>
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/>

        <!-- 配置表单验证 -->
        <form-login authentication-failure-url="/login.jsp?authentication_error=1" default-target-url="/index.jsp"  login-page="/login.jsp" login-processing-url="/login.do"/>
        <!--验证成功-->
        <logout logout-success-url="/index.jsp" logout-url="/logout.do"/>
        <!--验证错误-->
        <access-denied-handler error-page="/login.jsp?authorization_error=2"/>
        <anonymous/>

        <!--CSRF 不启用; 实际 场景 推荐启用 -->
        <csrf disabled="true"/>
    </http>


    <authentication-manager alias="authenticationManager">
        <authentication-provider user-service-ref="userService">
            <!--
            密码使用 MD5 加密 ; 实际使用时推荐使用 SHA-256, 并使用 salt
            -->
            <password-encoder hash="md5"/>
        </authentication-provider>
    </authentication-manager>


    <!--
    Oauth server end.............
    -->


</beans:beans>